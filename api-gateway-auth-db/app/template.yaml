AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  AWS Application example using a dynamodb table for a single application

Parameters:
  CompanyName:
    Type: String
    Default: "acme.inc"
  ApplicationName:
    Type: String
    Default: "application-abc"

Resources:

  ApplicationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ApplicationName}-${AWS::StackName}"
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: gsi_id
          AttributeType: S      
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE

      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes:
        - IndexName: gsi_id          
          KeySchema:
            - AttributeName: gsi_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput: 
             ReadCapacityUnits: 5
             WriteCapacityUnits: 5
        # ability to query the sort key directly
        - IndexName: gsi_sk          
          KeySchema:
            - AttributeName: sk
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput: 
             ReadCapacityUnits: 5
             WriteCapacityUnits: 5
        - IndexName: gsi_sk_min          
          KeySchema:
            - AttributeName: sk
              KeyType: HASH
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes:
              - last_name
              - first_name
              - gsi_id
          ProvisionedThroughput: 
             ReadCapacityUnits: 5
             WriteCapacityUnits: 5
  UserCommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: user-functions-common-layer
      Description: common user functions
      ContentUri: src/lambda_functions/users/common
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: python3.9

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      # FailOnWarnings is so helpful, to troubleshoot why things like authorizers aren't deploying 
      FailOnWarnings: true
      Auth:
        Authorizers:
          AdminAuthorizer:            
            AuthorizerResultTtlInSeconds: 5
            AuthorizerPayloadFormatVersion: 2.0
            EnableSimpleResponses: true
            FunctionArn: !GetAtt HttpApiAdminAuthorizer.Arn                          
            Identity:
              Headers:
                - Authorization
          UserAuthorizer:            
            AuthorizerResultTtlInSeconds: 5
            AuthorizerPayloadFormatVersion: 2.0
            EnableSimpleResponses: true
            FunctionArn: !GetAtt HttpApiUserAuthorizer.Arn                          
            Identity:
              Headers:
                - Authorization
          SuperUserAuthorizer:            
            AuthorizerResultTtlInSeconds: 5
            AuthorizerPayloadFormatVersion: 2.0
            EnableSimpleResponses: true
            FunctionArn: !GetAtt HttpApiSuperUserAuthorizer.Arn                          
            Identity:
              Headers:
                - Authorization

      AccessLogSettings:
        # add logging
        DestinationArn: !GetAtt HttpApiLogGroup.Arn
        Format: >-
          '{ 
          "requestId":"$context.requestId", 
          "ip": "$context.identity.sourceIp", 
          "caller":"$context.identity.caller", 
          "user":"$context.identity.user", 
          "requestTime":"$context.requestTime", 
          "routeKey":"$context.routeKey", 
          "status":"$context.status", 
          "integrationErrors": "$context.integrationErrorMessage", 
          "errors": "$context.error.message",
          "authMessage": "$context.authorizer.message",
          "authError": "$context.authorizer.error",
          "context": "$context"
          }'

  # TODO find out how we can use this, if it's not defined under the HttpApi
  # Even though, I'm referencing it here to the HttpApi resource, I can't reference it in the
  # Serverless Functions (the SAM parser doesn't see it bound to the HttpApi)
  # If I could create it like below then I can get the `id` and make the authorizor slightly more secure on the permission boundry
  # CustomJWtLambdaAuthorizer:
  #   Type: AWS::ApiGatewayV2::Authorizer
  #   Properties:
  #     Name: CustomJWtLambdaAuthorizer
  #     ApiId: !Ref HttpApi
  #     AuthorizerType: REQUEST
  #     #AuthorizerCredentialsArn: Arn
  #     AuthorizerUri: !Sub >-
  #       arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HttpApiAdminAuthorizer.Arn}/invocations
        
  #     AuthorizerPayloadFormatVersion: 2.0      
  #     AuthorizerResultTtlInSeconds: 5
  #     IdentitySource:
  #       - $request.header.Authorization
      

  UserLoginFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/lambda_functions/users/login
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Layers:
        - !Ref UserCommonLayer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ApplicationTable
      Events:
        LoginUser:
          Type: HttpApi
          Properties:
            Path: /login
            Method: POST
            ApiId: !Ref HttpApi
      Timeout: 300
      Environment:
        Variables:
          TABLE_NAME: !Ref ApplicationTable

  UserListFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: src/lambda_functions/users/list
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Layers:
        - !Ref UserCommonLayer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ApplicationTable
      Events:
        GetAllItems:
          Type: HttpApi
          Properties:
            Path: /users
            Method: GET
            ApiId: !Ref HttpApi
            Auth:
              Authorizer: AdminAuthorizer
      Timeout: 300
      Environment:
        Variables:
          TABLE_NAME: !Ref ApplicationTable        
            
  
  TokenView:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: src/lambda_functions/authentication/token/view
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Layers:
        - !Ref UserCommonLayer
      
      Events:
        GetAllItems:
          Type: HttpApi
          Properties:
            Path: /token/view
            Method: GET
            ApiId: !Ref HttpApi
            
      Timeout: 5
  
  TokenValidate:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: src/lambda_functions/authentication/token/validate
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Layers:
        - !Ref UserCommonLayer
      
      Events:
        GetAllItems:
          Type: HttpApi
          Properties:
            Path: /token/validate
            Method: GET
            ApiId: !Ref HttpApi
            
      Timeout: 5

  UserSeed:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/lambda_functions/users/seed
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Layers:
        - !Ref UserCommonLayer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ApplicationTable
      Timeout: 300
      Environment:
        Variables:
          TABLE_NAME: !Ref ApplicationTable
     

  HttpApiAdminAuthorizer:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/lambda_functions/authentication/authorizer
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Layers:
        - !Ref UserCommonLayer
      Environment:
        Variables:
          ALLOWED_SCOPES: "[admin]"

  AdminAuthorizerPermissionToInvoke:
     Type: AWS::Lambda::Permission
     Properties:
       Principal: apigateway.amazonaws.com
       FunctionName: !Ref HttpApiAdminAuthorizer       
       Action: lambda:InvokeFunction
       # I'm not crazy about the wild card but we can't get the authorizerid back
       SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/authorizers/*"


  HttpApiUserAuthorizer:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/lambda_functions/authentication/authorizer
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Layers:
        - !Ref UserCommonLayer
      Environment:
        Variables:
          ALLOWED_SCOPES: "[user,admin,super-user]"

  UserAuthorizerPermissionToInvoke:
     Type: AWS::Lambda::Permission
     Properties:
       Principal: apigateway.amazonaws.com
       FunctionName: !Ref HttpApiUserAuthorizer       
       Action: lambda:InvokeFunction
       # I'm not crazy about the wild card but we can't get the authorizerid back
       SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/authorizers/*"

  HttpApiSuperUserAuthorizer:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/lambda_functions/authentication/authorizer
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Layers:
        - !Ref UserCommonLayer
      Environment:
        Variables:
          ALLOWED_SCOPES: "[super-user,admin]"

  SuperUserAuthorizerPermissionToInvoke:
     Type: AWS::Lambda::Permission
     Properties:
       Principal: apigateway.amazonaws.com
       FunctionName: !Ref HttpApiSuperUserAuthorizer       
       Action: lambda:InvokeFunction
       # I'm not crazy about the wild card but we can't get the authorizerid back
       SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/authorizers/*"

  HttpApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/${CompanyName}/${ApplicationName}/${HttpApi}"
      RetentionInDays: 30

  
  


Outputs:
  ApiUri:
    Description: "API Gateway endpoint URL for Prod stage for User Login function"
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com"
  UserLoginFunction:
    Description: "User Login Lambda Function ARN"
    Value: !GetAtt UserLoginFunction.Arn
  UserLoginFunctionIamRole:
    Description: "Implicit IAM Role created for User Login function"
    Value: !GetAtt UserLoginFunctionRole.Arn