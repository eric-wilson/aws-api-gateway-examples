AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Cognito User Pool

Parameters:
  AppName:
    Type: String
    Description: The Name of the application / for the user pool
    Default: "demo-app"
  CallbackUrls:
    Type: CommaDelimitedList
    Description: List of domains allowed to use this userpool
    Default: "https://localhost:5656/callback,https://example.com/callback"
  LogoutUrls:
    Type: CommaDelimitedList
    Description: List of domains allowed to use this userpool
    Default: "https://localhost:5656/signout,https://example.com/signout"
  AdminUserEmail:
    Type: String
    Description: Email address for the administrator. Leave empty if you don't want one created.  Usefull in demos or lower environments.
  RegularUserEmail:
    Type: String
    Description: Email address for a regular user. Leave empty if you don't want one created. Usefull in demos or lower environments.
  AddGroupsToScopes:
    Type: String
    Description: Defines if a scopes are automatically added to users
    AllowedValues:
      - true
      - false
    Default: false

  CustomDomainName:
    Type: String
    Description: The domain name you want to setup for custom loging example auth.example.com
    Default: ""
  SSLCertificateArn:
    Type: String
    Description: the ssl certification for the 
    Default: ""
Conditions:
  CreateScopes: !Equals [!Ref AddGroupsToScopes, 'true' ]
  CreateRegularUserEmail: !Not [ !Equals [!Ref RegularUserEmail, "" ] ]
  CreateAdminUserEmail: !Not [ !Equals [!Ref AdminUserEmail, "" ] ]
  CreateCustomDomainName: !Not [ !Equals [!Ref CustomDomainName, "" ] ]
  AddSSLCert: !Not [ !Equals [!Ref SSLCertificateArn, "" ] ]

Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AppName}-user-pool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
  
  # this is where you can build out custom scopes per user pool
  # would like some more detail on this
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Sub ${AppName}-user-pool-client
      # if building iOS, go ahead and add a secret
      GenerateSecret: false # not needed for web clients      
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs: !Ref CallbackUrls
      LogoutURLs: !Ref LogoutUrls
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code # for jwt etc
        - implicit # postman likes implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile

  ## add a custom domain
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Condition: CreateCustomDomainName
    Properties:
      # the domain you want to bind 
      Domain:  !Ref CustomDomainName #!Sub ${AppName}-${AWS::AccountId}
      # tie it to the user pool we created above
      UserPoolId: !Ref CognitoUserPool
      CustomDomainConfig:
        CertificateArn: !If [ AddSSLCert, !Ref SSLCertificateArn, !Ref AWS::NoValue]

Outputs:
    CognitoUserPoolId:
      Description: The Cognito User Pool Id
      Value: !Ref CognitoUserPool
      Export:
        Name: !Sub ${AppName}:UserPoolId
